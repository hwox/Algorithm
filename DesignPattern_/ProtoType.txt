프로토타입 패턴을 이용하면 어떤 모델 객체를 복제할 수 있고, 복제본을 커스터마이즈할 수도 있고, 사용할 수도 있다.

프로토타입 패턴은 객체의 복제가 주요 기능이다.
당연하지만 객체를 복제하는 하나의 일관된 방법은 없고 여러 가지 옵션 중 몇 가지를 선택할 수 있다.

객체 복제를 위해 그 구성 요소 그래프 전체에 걸쳐서 각 요소마다 명시적인 복제 연산을 일일이 정의해야만 한다.
이러한 불편함을 해결하기 위해서는 어떤 클래스든 쉽게 직렬화 될 수 있어야 한다는 것을 깨달았다.
직렬화한다는 것의 의미는 어떤 객체 데이터를 비트의 나열로 만들어 파일에 저장하거나 네트워크로 전송할 수 있게 하는 것을 의미한다.

별도의 특별한 변환 작업없이 직렬화될 수 있으면 객체를 복제하기가 쉬워진다.
왜 직렬화가 객체 복제를 쉽게 만들 수 있을까? 객체를 비트열로 나타내어 온전한 상태로 파일이나 메모리에 쓸 수 있으면, 거꾸로 읽어들여서 (역직렬화) 모든 정보와 내부 구성 요소들을 복구할 수 있다.
그러한 작업은 복제 작업과 동일하다. 


팩터리를 이용하는 이유?
사용자가 프로토타입을 복제한 다음 새로 설정해야 할 부분들을 누락할 수 있다.
즉, 올바른 데이터로 채워져 있어야 할 항목들이 null이거나 공백 문자인 채로 이용될 수 있다.


요약)
프로토타입 패턴은 객체의 깊은 복제를 수행하되 매번 전체 초기화를 하는 대신 미리 부분적으로 만들어진 객체를 복제하여 약간의 수정만으로 이용할 수 있게 한다.
이 과정에서 원본 객체에 대한 걱정은 하지 않아도 되게 해준다. 

C++에서 프로토타입 패턴을 구현할 방법은 아래와 같이 두 가지밖에 없다.
두 방법 모두 수작업이 필요하다.


(C++에서는 직렬화를 언어 차원에서 지원하지 않는다.)
* 객체의 깊은 복제를 올바르게 수행하는 코드를 작성한다. 복제 생성자나 복제 대입 연산자를 구현할 수도 있고 별도의 멤버 함수를 만들 수도 있다.
* 직렬화/역직렬화 기능을 구현하여, 직렬화 직후 역직렬화를 하는 방법으로 복제를 한다. 